// migrations/005-comprehensive-field-length-fix.js
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    console.log('üîß Fixing field lengths for TikTok data...');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º–∏
    const fieldsToFix = [
      {
        field: 'scope',
        type: Sequelize.TEXT,
        comment: '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è (scopes) –¥–ª—è —Ç–æ–∫–µ–Ω–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º'
      },
      {
        field: 'tiktokUserId', 
        type: Sequelize.STRING(100), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
        comment: 'open_id –æ—Ç TikTok'
      },
      {
        field: 'tiktokUnionId',
        type: Sequelize.STRING(100), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤  
        comment: 'union_id –æ—Ç TikTok (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)'
      },
      {
        field: 'displayName',
        type: Sequelize.STRING(500), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ emoji –∏ –¥–ª–∏–Ω–Ω—ã—Ö –∏–º–µ–Ω
        comment: '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≤ TikTok'
      }
    ];

    for (const fieldConfig of fieldsToFix) {
      try {
        console.log(`üìù Updating field: ${fieldConfig.field}`);
        
        await queryInterface.changeColumn('tiktok_accounts', fieldConfig.field, {
          type: fieldConfig.type,
          allowNull: true,
          comment: fieldConfig.comment
        });
        
        console.log(`‚úÖ Field ${fieldConfig.field} updated successfully`);
      } catch (error) {
        console.error(`‚ùå Error updating field ${fieldConfig.field}:`, error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—è–º–∏
      }
    }

    // –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º likesCount - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º
    try {
      console.log('üìù Updating likesCount to BIGINT...');
      
      await queryInterface.changeColumn('tiktok_accounts', 'likesCount', {
        type: Sequelize.BIGINT,
        defaultValue: 0,
        comment: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º)'
      });
      
      console.log('‚úÖ likesCount updated to BIGINT');
    } catch (error) {
      console.error('‚ùå Error updating likesCount:', error.message);
    }

    console.log('üéâ Field length fixes completed!');
  },

  down: async (queryInterface, Sequelize) => {
    console.log('üîÑ Rolling back field length fixes...');
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö)
    const rollbackFields = [
      { field: 'scope', type: Sequelize.STRING },
      { field: 'tiktokUserId', type: Sequelize.STRING },
      { field: 'tiktokUnionId', type: Sequelize.STRING },
      { field: 'displayName', type: Sequelize.STRING },
      { field: 'likesCount', type: Sequelize.INTEGER }
    ];

    for (const fieldConfig of rollbackFields) {
      try {
        await queryInterface.changeColumn('tiktok_accounts', fieldConfig.field, {
          type: fieldConfig.type,
          allowNull: true
        });
        console.log(`‚úÖ Rolled back field: ${fieldConfig.field}`);
      } catch (error) {
        console.error(`‚ùå Error rolling back field ${fieldConfig.field}:`, error.message);
      }
    }
  }
};